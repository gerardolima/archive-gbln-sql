-- ----------------------------------------------------------------------------
-- 'system_health' extended events parser
--
-- This script parses the xml payload generated by the default 'system_health'
-- exended events session into tabular format. The events currently parsed are
-- 'error_reported', 'wait_info' and 'xml_deadlock_report'. Each event type is
-- parsed into a CTE table, that can be queried as regular table. It is not
-- possible to parse the xml payload for different events into the same table
-- due structure differences that exist among the events.
--
-- This script is divided in 3 main parts:
--  1. get xml payload
--  2. parse xml into tabular format
--  3. query over the data
--
-- REMARKS
-- . callstack elements are discarded (we have no use for binnary dump of sql server)
--
-- gerardo.lima 2013-08-21
-- ----------------------------------------------------------------------------

; WITH
xmldoc AS (

	-- OPTION 1: load XML payload from extended events target DMVs
	-- -----------------------------------------------------------
	--SELECT CAST(trg.target_data AS XML) AS target_data
	--FROM sys.dm_xe_session_targets	trg
	--JOIN sys.dm_xe_sessions			ses ON ses.Address = trg.event_session_address
	--JOIN sys.server_event_sessions	evs ON ses.Name = evs.Name
	--WHERE 1=1
	--AND trg.target_name = 'ring_buffer'
	--AND ses.Name = 'system_health'

	-- OPTION 2: load XML payload from filesystem
	-- -----------------------------------------------------------
   SELECT CAST(sourceXml AS XML) AS target_data
   FROM OPENROWSET (BULK 'c:\temp\SYSTEM_HEALTH-min.XML', SINGLE_BLOB) AS sourceFile (sourceXml)

	-- OPTION 3: load XML payload from temporary table
	-- -----------------------------------------------------------
	--SELECT target_data FROM #XmlPayload
)
, evt_error AS (
-- ERROR EVENTS ---------------------------------------------------------------
	SELECT evt.value('@name','VARCHAR(30)')											AS [event_name]
	, evt.value('@timestamp','DATETIME')											AS [event_ts]
	-- default payload
	, evt.query('./data[@name="error"]/value').value('.', 'INT')					AS [error]
	, evt.query('./data[@name="severity"]/value').value('.', 'TINYINT')				AS [severity]
	, evt.query('./data[@name="state"]/value').value('.', 'TINYINT')				AS [state]
	, evt.query('./data[@name="user_defined"]/value').value('.', 'BIT')				AS [is_user_defined]
	, evt.query('./data[@name="message"]/value').value('.', 'NVARCHAR(MAX)')		AS [message]
	-- actions
	, evt.query('./action[@name="session_id"]/value').value('.', 'SMALLINT')		AS [session_id]
	, evt.query('./action[@name="sql_text"]/value').value('.', 'NVARCHAR(MAX)')		AS [sql_text]
	, evt.query('./action[@name="tsql_stack"]/value').value('.', 'NVARCHAR(MAX)')	AS [tsql_stack]
	FROM xmldoc
	CROSS APPLY target_data.nodes('/RingBufferTarget/event[@name="error_reported"]') AS tabTargetData(evt)
)
, evt_wait AS (
-- WAIT EVENTS ----------------------------------------------------------------
	SELECT evt.value('@name','VARCHAR(30)')											AS [event_name]
	, evt.value('@timestamp','DATETIME')											AS [event_ts]
	-- default payload
	, evt.query('./data[@name="wait_type"]/value').value('.', 'INT')				AS [wait_types]
	, evt.query('./data[@name="wait_type"]/text').value('.', 'NVARCHAR(20)')		AS [wait_types_txt]
	, evt.query('./data[@name="opcode"]/value').value('.', 'INT')					AS [opcode]
	, evt.query('./data[@name="opcode"]/text').value('.', 'NVARCHAR(20)')			AS [opcode_txt]
	, evt.query('./data[@name="duration"]/value').value('.', 'INT')					AS [duration]
	, evt.query('./data[@name="max_duration"]/value').value('.', 'INT')				AS [max_duration]
	, evt.query('./data[@name="total_duration"]/value').value('.', 'INT')			AS [total_duration]
	, evt.query('./data[@name="signal_duration"]/value').value('.', 'INT')			AS [signal_duration]
	, evt.query('./data[@name="completed_count"]/value').value('.', 'INT')			AS [completed_count]
	-- actions	
	, evt.query('./action[@name="session_id"]/value').value('.', 'SMALLINT')		AS [session_id]
	, evt.query('./action[@name="sql_text"]/value').value('.', 'NVARCHAR(MAX)')		AS [sql_text]
	FROM xmldoc
	CROSS APPLY target_data.nodes('/RingBufferTarget/event[@name="wait_info"]') AS tabTargetData(evt)
)
, evt_deadlock AS (
-- DEADLOCK EVENTS ------------------------------------------------------------
	SELECT evt.value('@name','VARCHAR(30)')											AS [event_name]
	, evt.value('@timestamp','DATETIME')											AS [event_ts]
	-- default payload
	, evt.query('./data[@name="xml_report"]/value').value('.', 'NVARCHAR(MAX)')		AS [RAW]
	FROM xmldoc
	CROSS APPLY target_data.nodes('/RingBufferTarget/event[@name="xml_deadlock_report"]') AS tabTargetData(evt)
)
SELECT TOP(2) * FROM evt_deadlock
